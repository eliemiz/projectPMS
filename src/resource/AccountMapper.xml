<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="pms.a03_dao.A00_AccountDao">
	<!-- public ArrayList<Account> getAccountList(); -->
	<select id="getAccountList" resultType="account">
	select * from account
	</select>
	<!-- public Account Login(Account log); -->
	<select id="Login" resultType="account" parameterType="account">
	SELECT * 
	FROM account
	WHERE user_id=#{user_id} AND password=#{password}
	</select>
	<!-- public void signinIns(Account insert); -->
	<insert id="signinIns" parameterType="account">
		INSERT INTO ACCOUNT
		VALUES (#{id}, #{user_id}, #{password}, #{name},
		        #{mail}, sysdate, sysdate, #{auth})	
	</insert>
	<!-- public Account find_pw(Account find); -->
	<select id="find_pw" resultType="account">
		select * from account where mail = #{mail} and name = #{name}
	</select>
	<!-- public Account find_id(Account find); -->
	<select id="find_id" resultType="account">
		select user_id from account where mail = #{mail} and name = #{name}
	</select>
	<!-- public void update_pw(Account upt); -->
	<update id="update_pw" parameterType="account">
		update account set password = #{password} where mail = #{mail}
	</update>
	<!-- public void update_info(Account upt); -->
	<update id="update_info" parameterType="account">
		update account 
		set name = #{name},
		password = #{password},
		mail = #{mail}
		where id = #{id}
	</update>
	<!-- public int sequence(); -->
	<select id="sequence" resultType="int">
		select account_seq.nextval from dual
	</select>
	<!-- public Account getAccount(int accountId) -->
	<select id="getAccount" resultType="account" parameterType="int">
		SELECT * 
		FROM account
		WHERE id=#{id}
	</select>
	<!-- public void loginDate(Account log); -->
	<update id="loginDate" parameterType="account">
		update account 
		set last_login_on = sysdate 
		where user_id = #{user_id}
	</update>
	<!-- int schMember(String user_id) 
	<select id="schMember" resultType="int" parameterType="String" >
      SELECT COUNT(*) FROM account
      WHERE user_id = #{user_id}
	</select>
	-->
	<!-- public int schMember(String mail); -->
	<select id="schMember" resultType="int" parameterType="String" >
      SELECT COUNT(*) FROM account
      WHERE mail = #{mail}
	</select>
	<!-- 
	public ArrayList<Task> getTask(int id);
	
	public int taskCount1(int id);
	
	public int taskCount2(int id);
		 <select id="getTask" resultType="task" parameterType="int">
		SELECT t.*
		FROM account a, task t
		WHERE a.id=t.account_id
		AND t.account_id=#{id}
	 </select>
	 -->

	 <select id="taskCount1" resultType="int" parameterType="int">
		SELECT count(*) 
		FROM task t, account a
		WHERE t.ACCOUNT_ID = a.ID 
		AND (t.status = '진행' OR t.status = '신규')
		AND t.account_id=#{id}
	 </select>
	 <select id="taskCount2" resultType="int" parameterType="int">
		SELECT count(*) 
		FROM task t, account a
		WHERE t.ACCOUNT_ID = a.ID 
		AND t.status='완료'
		AND t.account_id=#{id}
	 </select>
	 
	<!-- for Dashboard -->
	<!-- public ArrayList<AccountTask> getAccountTaskList(); -->
	<select id="getAccountTaskList" resultType="accountTask" parameterType="int">
		SELECT A.ID ACCOUNT_ID, A.NAME, A.AUTH,
			COUNT(CASE WHEN A.ID = T.ACCOUNT_ID THEN 1 END) TOTAL,
			COUNT(CASE WHEN T.STATUS = '완료' AND A.ID = T.ACCOUNT_ID THEN 1 END) COMPLETED, 
			COUNT(CASE WHEN T.STATUS != '완료' AND A.ID = T.ACCOUNT_ID THEN 1 END) INCOMPLETED
			FROM ACCOUNT A, TASK T, PROJECT_USER P
			WHERE T.PROJECT_ID(+) = #{projectId}
			AND T.ACCOUNT_ID(+) = P.ACCOUNT_ID
			AND P.PROJECT_ID = #{projectId}
			AND A.ID = P.ACCOUNT_ID
			GROUP BY (A.ID, A.NAME, A.AUTH) ORDER BY A.ID
	</select>
	<!-- public ArrayList<AccountTask> getAccountTaskListForChart(int projectId); -->
	<select id="getAccountTaskListForChart" resultType="accountTask" parameterType="int">
		SELECT A.ID ACCOUNT_ID, A.NAME, A.AUTH,
			COUNT(CASE WHEN A.ID = T.ACCOUNT_ID THEN 1 END) TOTAL,
			COUNT(CASE WHEN T.STATUS = '완료' AND A.ID = T.ACCOUNT_ID THEN 1 END) COMPLETED, 
			COUNT(CASE WHEN T.STATUS != '완료' AND A.ID = T.ACCOUNT_ID THEN 1 END) INCOMPLETED
			FROM ACCOUNT A, TASK T
			WHERE T.PROJECT_ID = #{projectId} 
			GROUP BY (A.ID, A.NAME, A.AUTH)
	</select>
	
	<!-- public ArrayList<ProjectUser> getProjectUsers(int projectId); -->
	<select id="getProjectUsers" resultType="projectUser" parameterType="int">
		SELECT A.ID ACCOUNT_ID, A.AUTH AUTH, A.NAME NAME, DECODE(P.ACCOUNT_ID, A.ID, 1, 0) MEMBER 
		FROM ACCOUNT A, PROJECT_USER P 
		WHERE A.ID = P.ACCOUNT_ID(+)
		AND P.PROJECT_ID(+) = #{projectId}
		ORDER BY ACCOUNT_ID DESC
	</select>
	
	<!-- public void deleteProjectUsers(int projectId); -->
	<delete id="deleteProjectUsers" parameterType="int">
		DELETE FROM PROJECT_USER WHERE PROJECT_ID = #{projectId}
	</delete>
	
	<!-- public void insertProjectUser(ProjectUser pu); -->
	<insert id="insertProjectUser" parameterType="projectUser">
		INSERT INTO PROJECT_USER VALUES (#{project_id}, #{account_id})
	</insert>
	
</mapper>